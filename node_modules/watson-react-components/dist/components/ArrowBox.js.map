{"version":3,"sources":["ArrowBox.js"],"names":["getValue","str","match","getUnit","capitalize","charAt","toUpperCase","slice","hasUnit","bool","length","halfUnit","createClass","propTypes","direction","PropTypes","oneOf","show","icon","concat","color","string","width","height","relativeOffset","manualPositioning","style","object","arrowStyle","className","getDefaultProps","gray_50","render","posHeight","props","posWidth","directions","top","bottom","left","right","none","borderStyle","backgroundColor","children"],"mappings":"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","file":"ArrowBox.js","sourcesContent":["/* eslint max-len:off */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Icon, IconTypes } from './Icon';\nimport Colors from './Colors';\n\nconst getValue = str => str.match(/^[0-9]*/g)[0];\nconst getUnit = str => str.match(/[^0-9].*/g)[0];\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\nconst hasUnit = (str) => {\n  let bool = false;\n  if (typeof str !== 'undefined' &&\n      str !== null &&\n      getValue(str).length > 0) {\n    bool = true;\n  }\n  return bool;\n};\nconst halfUnit = str => (getValue(str) / 2) + getUnit(str);\n\nexport default React.createClass({\n  propTypes: {\n    direction: React.PropTypes.oneOf(['top', 'right', 'bottom', 'left', 'none']),\n    show: React.PropTypes.bool,\n    icon: React.PropTypes.oneOf([].concat(IconTypes, null)),\n    color: React.PropTypes.string,\n    width: React.PropTypes.string,\n    height: React.PropTypes.string,\n    // Offset from element that arrow box is relative to.\n    // Ex. if relativeOffset = '50%', then the arrow box is\n    // 50% of the main element's width or height\n    relativeOffset: React.PropTypes.string,  // css values in string form\n    manualPositioning: React.PropTypes.string,  // css values in string form\n    // style and arrowStyle are inline css style objects\n    style: React.PropTypes.object,  // eslint-disable-line\n    arrowStyle: React.PropTypes.object,  // eslint-disable-line\n    className: React.PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      direction: 'top',\n      show: false,\n      width: '15rem',\n      height: 'auto',\n      relativeOffset: '50%',\n      manualPositioning: null,\n      icon: null,\n      color: Colors.gray_50,\n      className: '',\n    };\n  },\n\n  render() {\n    // Use manualPositioning first.\n    // If no manualPositioning, but height/width has a defined unit value\n    // in css, then use half of that. Or else just use 0px.\n    let posHeight = this.props.manualPositioning;\n    let posWidth = this.props.manualPositioning;\n\n    if (!posHeight) {\n      if (hasUnit(this.props.height)) {\n        posHeight = halfUnit(this.props.height);\n      } else {\n        posHeight = '0px';\n      }\n    }\n\n    if (!posWidth) {\n      if (hasUnit(this.props.width)) {\n        posWidth = halfUnit(this.props.width);\n      } else {\n        posWidth = '0px';\n      }\n    }\n\n    const directions = {\n      top: {\n        bottom: 'calc(100% + 1rem)',\n        left: `calc(${this.props.relativeOffset} - ${posWidth})`,\n      },\n      right: {\n        left: 'calc(100% + 1rem)',\n        top: `calc(${this.props.relativeOffset} - ${posHeight})`,\n      },\n      bottom: {\n        top: 'calc(100% + 1rem)',\n        left: `calc(${this.props.relativeOffset} - ${posWidth})`,\n      },\n      left: {\n        right: 'calc(100% + 1rem)',\n        top: `calc(${this.props.relativeOffset} - ${posHeight})`,\n      },\n      none: {},\n    };\n    const borderStyle = {};\n    if (this.props.direction !== 'none') {\n      borderStyle[`border${capitalize(this.props.direction)}Color`] = this.props.color;\n    }\n\n    return (\n      <div\n        className={classNames(\n          'arrow-box',\n          { 'arrow-box_top': this.props.direction === 'top' },\n          { 'arrow-box_right': this.props.direction === 'right' },\n          { 'arrow-box_bottom': this.props.direction === 'bottom' },\n          { 'arrow-box_left': this.props.direction === 'left' },\n          { 'arrow-box_no-arrow': this.props.direction === 'none' },\n          { 'arrow-box_hidden': !this.props.show },\n          this.props.className\n        )}\n        style={Object.assign(\n          directions[this.props.direction],\n          { width: this.props.width },\n          { height: this.props.height },\n          { backgroundColor: this.props.color },\n          this.props.style\n        )}\n      >\n        { // eslint-disable-next-line react/prop-types\n          this.props.children }\n        <span\n          className=\"arrow-box--arrow\"\n          style={Object.assign(\n            borderStyle,\n            this.props.arrowStyle\n          )}\n        />\n        { this.props.icon ?\n          (<Icon\n            className=\"arrow-box--icon\"\n            type={this.props.icon}\n            size=\"regular\"\n            fill={this.props.color}\n          />) : null }\n      </div>\n    );\n  },\n});\n"]}