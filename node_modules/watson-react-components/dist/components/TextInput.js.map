{"version":3,"sources":["TextInput.js"],"names":["padding","createClass","propTypes","onInput","PropTypes","func","getDefaultProps","id","Math","round","random","placeholder","getInitialState","inputWidth","e","dummy","target","nextSibling","value","replace","text","textContent","setState","offsetWidth","props","call","render","empty","state","width"],"mappings":"sSAAA;;;GAKA,4B,2CACA,sC,wIAEA,GAAMA,SAAU,CAAhB,C,gBAEe,gBAAMC,WAAN,CAAkB,yBAC/B;AACAC,UAAW,CACTC,QAAS,gBAAMC,SAAN,CAAgBC,IADhB,CAFoB,CAM/BC,eAN+B,2BAMb,CAChB,MAAO,CACLC,gBAAiBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,IAA3B,CADZ,CAELC,YAAa,gBAFR,CAGLR,QAAS,kBAAM,CAAE,CAHZ,CAAP,CAKD,CAZ8B,CAc/BS,eAd+B,2BAcb,CAChB,MAAO,CACLC,WAAYb,OADP,CAAP,CAGD,CAlB8B,CAoB/BG,OApB+B,kBAoBvBW,CApBuB,CAoBpB,CACT,GAAMC,OAAQD,EAAEE,MAAF,CAASC,WAAvB,CACA;AACA;AACA;AACA;AACA;AACAH,EAAEE,MAAF,CAASE,KAAT,CAAiBJ,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,CAA8B,GAA9B,CAAjB,CAAqD;AACrD,GAAMC,MAAON,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,CAA8B,GAA9B,CAAb,CACAJ,MAAMM,WAAN,CAAoBD,IAApB,CACA,KAAKE,QAAL,CAAc,CACZT,WAAYE,MAAMQ,WAAN,CAAoBvB,OADpB,CAAd,EAIA,GAAI,KAAKwB,KAAL,CAAWrB,OAAf,CAAwB,CACtB,KAAKqB,KAAL,CAAWrB,OAAX,CAAmBsB,IAAnB,CAAwB,IAAxB,CAA8BX,CAA9B,EACD,CACF,CArC8B,CAuC/BY,MAvC+B,kBAuCtB,CACP,MACE,wCACE;AACA,QAAS,KAAKF,KAAL,CAAWjB,EAFtB,CAGE,UAAU,YAHZ,EAKE,gDACE,KAAK,MADP,CAEE,UAAW,yBACT,mBADS,CAET,aAFS,CAGT,CAAEoB,MAAO,KAAKC,KAAL,CAAWf,UAAX,GAA0Bb,OAAnC,CAHS,CAFb,CAOE,MAAO,CAAE6B,MACN,KAAKD,KAAL,CAAWf,UAAX,CAAwBb,OAAxB,CACI,KAAK4B,KAAL,CAAWf,UADf,MAEC,MAHG,CAPT,EAYM,KAAKW,KAZX,EAaE,QAAS,KAAKrB,OAbhB,GALF,CAoBE,sCAAM,UAAU,mBAAhB,EApBF,CADF,CAwBD,CAhE8B,CAAlB,C","file":"TextInput.js","sourcesContent":["/*\nThis implementation was modeled after the input in\nhttps://conversation-simple.mybluemix.net/\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nconst padding = 2;\n\nexport default React.createClass({\n  // all html input[type=\"text\"] properties are valid\n  propTypes: {\n    onInput: React.PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      id: `textinput-${Math.round(Math.random() * 1000)}`,\n      placeholder: 'Type Something',\n      onInput: () => {},\n    };\n  },\n\n  getInitialState() {\n    return {\n      inputWidth: padding,\n    };\n  },\n\n  onInput(e) {\n    const dummy = e.target.nextSibling;\n    // this is a hack for when you type space,\n    // input text gets shifted because of mismatched width between\n    // dummy and real input.  Char 'r' is used because it has the same\n    // length as a char ' ' in order for the width of the space to count.\n    // eslint-disable-next-line\n    e.target.value = e.target.value.replace(/\\t/g, ' '); // change tabs to spaces\n    const text = e.target.value.replace(/\\s/g, 'r');\n    dummy.textContent = text;\n    this.setState({\n      inputWidth: dummy.offsetWidth + padding,\n    });\n\n    if (this.props.onInput) {\n      this.props.onInput.call(this, e);\n    }\n  },\n\n  render() {\n    return (\n      <label\n        // eslint-disable-next-line react/prop-types\n        htmlFor={this.props.id}\n        className=\"text-input\"\n      >\n        <input\n          type=\"text\"\n          className={classNames(\n            'text-input--input',\n            'base--input',\n            { empty: this.state.inputWidth === padding }\n          )}\n          style={{ width:\n            (this.state.inputWidth > padding ?\n              `${this.state.inputWidth}px` :\n              '100%'),\n          }}\n          {...this.props}\n          onInput={this.onInput}\n        />\n        <span className=\"text-input--dummy\" />\n      </label>\n    );\n  },\n});\n"]}